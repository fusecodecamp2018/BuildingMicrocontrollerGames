/***********
 * Zombie game
 ***********
 * A strategy game of hidden information and social interaction where humans try to defeat zombies
 * by forming teams of larger size than the zombie horde. Only zombies know they are zombies
 * and try to convince humans to join their “team”.
 *
 * Rules:
 ***********
 * Players join a master game via initial pairing and are each assigned a unique team letter A-Z
 * Once pairing is complete the game begins and 1/3 of the players are assigned to be zombies.
 * The game begins with a 5 second period of players hiding their screens and the zombies are told which players are zombies.
 * After this point the screen always shows a player’s team letter.
 * 
 * Once per game a player can join a team by pairing to another player and taking on that player’s identifier.
 * For example player A can join player B and after that point both players screens will show B.
 * Similarly player C could join team B by pairing to either of the members.
 * Note: the joining player will not know until the end of the game if they’ve joined a human team
 * or been infected and will be unknowingly recruiting for the zombie horde.
 * 
 * The game is over when either the zombie horde or a single human team contains the majority of players and wins the game.
 * Note: the 2 zombies do not need to join a single team, they can independently expand the horde by growing their own teams.
 * 
 * Control:
 ***********
 * Press A+B to enter master mode (1 per game)
 *
 * Wait for players to be paired. The number of paired player will display on screen.
 * An icon will appear on each player's screen.
 * 
 * The master should press A+B to start the game.  The game will end itself when appropriate.
 *
 * The master can also press A+B again to stop the game.
 */

const RSSI = -45; // db
const TEST_MODE = false;
const NET_DEBUG = false;

enum GameState {
    Stopped,
    Pairing,
    Running,
    Over
}

enum TeamState {
    Unjoined,
    AwaitingAcknowledgement,
    Joined
}

const GameIcons = {
    Pairing: IconNames.Ghost,
    Paired: IconNames.Happy,
    Zombie: IconNames.Skull,
    Human: IconNames.Heart,
    Starting: IconNames.Target
}

const playerIcons = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
class Player {
    id: number;
    icon: number;
    isZombie: boolean;
    show() {
        basic.showString(playerIcons[this.icon]);
    }
}

// common state
let state = GameState.Stopped;

// master state
let master = false;
const players: Player[] = [];

// player state
let paired = false;
let playerIcon = -1; // player icon and identity
let infected = false;
let teamStatus = TeamState.Unjoined;

// get a player instance (creates one as needed)
function player(id: number): Player {
    for (const p of players)
        if (p.id == id) return p;

    // add player to game
    let p = new Player();
    p.id = id;
    p.icon = (players.length) % playerIcons.length;

    players.push(p);
    serial.writeLine(`player ==> ${p.id}`)

    return p;
}


function gameOver() {
    serial.writeLine(`Game ended with ${countZombies()} zombies out of ${players.length} players`);
    state = GameState.Over;
}

function countZombies(): number {
    let count = 0;
    for (const p of players)
        if (p.isZombie) count++;
    return count;
}

//collect players into groups of teams and count the team members
function updateMembers(): number {
    let maxMembers = 0;
    // need to build map of team to players and update zombie status of each player in a team that has at least one other zombie
    for (let i = 0; i < players.length; i++) {
        let members = 0;
        let hasZombie = false;
        for (let j = 0; j < players.length; j++) {
            if (players[j].icon == i) {
                members++;
                if (players[j].isZombie)
                    hasZombie = true;
            }
        }

        //the team has more than 1 member and one is a zombie; make sure they all are
        if (members > 1 && hasZombie) {
            for (let j = 0; j < players.length; j++) {
                if (players[j].icon == i) {
                    players[j].isZombie = true;
                    radio.sendValue("infect", players[j].id);
                }
            }
        }

        //update the max
        if (members > maxMembers) {
            maxMembers = members;
        }

        serial.writeLine(`Team ${playerIcons[i]} has ${members} ${hasZombie ? "zombies" : "humans"}.`);
    }

    return maxMembers;
}

function isGameOver(): boolean {
    // check for any team majority or horde majority
    return Math.max(countZombies(), updateMembers()) > players.length / 2;
}

function gameFace() {
    switch (state) {
        case GameState.Stopped:
            basic.showIcon(GameIcons.Pairing);
            break;
        case GameState.Pairing:
            if (!paired)
                basic.showIcon(GameIcons.Pairing, 1);
            else {
                if (infected) {
                    basic.showIcon(GameIcons.Zombie);
                } else {
                    if (playerIcon > -1) {
                        basic.showString(playerIcons[playerIcon])
                    } else {
                        basic.showIcon(GameIcons.Pairing);
                    }
                }
            }
            break;
        case GameState.Running:
            basic.showString(playerIcons[playerIcon]);
            break;
        case GameState.Over:
            // show id
            basic.showString(playerIcons[playerIcon]);
            basic.pause(2000);

            if (infected) {
                basic.showIcon(GameIcons.Zombie);
            } else {
                basic.showIcon(GameIcons.Human);
            }
            basic.pause(2000);

            //TODO: show who won?
            break;
    }
}

// master button controller
input.onButtonPressed(Button.AB, () => {
    // register as master
    if (state == GameState.Stopped && !master) {
        master = true;
        paired = true;
        state = GameState.Pairing;
        radio.setTransmitPower(7); // beef up master signal
        basic.showString("0");
        return;
    }

    if (!master) return; // master only beyond this

    // launch game, as we were in pairing mode and AB was pressed again
    if (state == GameState.Pairing) {
        if (players.length < 1) {
            return;
        }

        let minZombies = Math.max(players.length / 3, 1);
        while (countZombies() < minZombies) {
            let ind = Math.randomRange(0, players.length - 1);
            if (!players[ind].isZombie) {
                players[ind].isZombie = true;
                serial.writeLine(`Infecting player ${playerIcons[ind]}.`);
                //broadcast infection
                radio.sendValue("infect", players[ind].id);
                basic.pause(100);
            }
        }

        basic.showIcon(GameIcons.Starting, 500);
        //wait for the zombies to see they were infected
        for (let i = 4; i > 0; i--) {
            basic.showNumber(i);
            basic.pause(1000);
        }
        basic.showIcon(GameIcons.Starting, 500);

        // all ready
        state = GameState.Running;
        serial.writeLine(`game started with ${players.length} players.`);

        // show startup
        basic.showString(countZombies() + "")
    } // end game as we were running and AB was pressed again
    else if (state == GameState.Running) {
        gameOver();
    }
})

radio.setGroup(40);
radio.setTransmitSerialNumber(true)
radio.onDataPacketReceived(({ time, receivedNumber, receivedString, signal, serial: id }) => {
    if (NET_DEBUG) {
        serial.writeLine(`REC: <${receivedString}, ${receivedNumber}> from ${id} at strength ${signal}`);
    }

    if (master) {
        if (receivedString == "pair") {
            // register player
            let n = players.length;
            let p = player(id);
            // show player number if changed
            if (n != players.length) {
                led.stopAnimation();
                basic.showNumber(players.length);
            }
        } else if (receivedString == "join") {
            player(id).icon = receivedNumber;
            serial.writeLine(`Player ${id} joined team ${receivedNumber}`);
            radio.sendValue("joined" + id, player(id).icon);

            //update zombie state of each member of each team if at least one of the memmbers is a zombie
            //  finally check if majority infected
            if (isGameOver()) {
                gameOver();
            } else {
                basic.showNumber(countZombies());
            }

        }
    } else {
        if (receivedString == "state") {
            // update game state
            state = receivedNumber as GameState;
        } else if (!infected && receivedString == "infect"
            && receivedNumber == control.deviceSerialNumber()) {
            infected = true;
            serial.writeLine(`Infected ${control.deviceSerialNumber()}`);
        }

        switch (state) {
            case GameState.Pairing:
                // medium range in pairing mode
                if (!paired &&
                    receivedString == "paired"
                    && receivedNumber == control.deviceSerialNumber()) {
                    // paired!
                    paired = true;
                    return;
                }
                else if (paired && receivedString == "i" + control.deviceSerialNumber().toString()) {
                    playerIcon = receivedNumber;
                }
                break;
            case GameState.Running:
                //update team state from master confirmation
                if (teamStatus == TeamState.AwaitingAcknowledgement && receivedString == "joined" + control.deviceSerialNumber().toString()) {
                    teamStatus = TeamState.Joined;
                    playerIcon = receivedNumber;
                } else if (receivedString == "team" && signal > RSSI) {  //check for nearby team broadcasts
                    //if TeamState is unjoined and button A is pressed, 
                    //join team (update local state to pending and broadcast)
                    if (teamStatus == TeamState.Unjoined) {
                        if (input.buttonIsPressed(Button.A)) {
                            //join team
                            serial.writeLine(`Player ${playerIcon} joining team ${receivedNumber} from player ${control.deviceSerialNumber()}`);
                            teamStatus = TeamState.AwaitingAcknowledgement;
                            playerIcon = receivedNumber;
                            //send to master to confirm join
                            radio.sendValue("join", receivedNumber);
                        } else if (!input.buttonIsPressed(Button.B)) {
                            //show prompt to join team
                            basic.showString(receivedNumber + "?");
                        }
                    }
                }
                break;
        }
    }
})

// main game loop
basic.forever(() => {
    if (master) {
        switch (state) {
            case GameState.Pairing:
                // tell each player they are registered
                for (const p of players) {
                    radio.sendValue("paired", p.id);
                    radio.sendValue("i" + p.id, p.icon);
                }
                basic.pause(500);
                break;
            case GameState.Running:
                //TODO: remove this, this is only for testing; this is done only after team joins happen
                if (TEST_MODE) {
                    isGameOver();
                }
                break;
            case GameState.Over:
                //TODO: anything?
                break;
        }
        radio.sendValue("state", state); // keep broadcasting the game state
    } else { // player loop
        switch (state) {
            case GameState.Pairing:
                // broadcast player id
                if (playerIcon < 0) {
                    radio.sendValue("pair", control.deviceSerialNumber());
                }
                break;
            case GameState.Running:
                switch (teamStatus) {
                    case TeamState.Unjoined:
                        //if we are unjoined and A is pressed, broadcast join beacon to others
                        if (input.buttonIsPressed(Button.A)) {
                            radio.sendValue("team", playerIcon);
                        }
                        break;
                    case TeamState.AwaitingAcknowledgement:
                        //if we are awaiting join confirmation still, rebroadcast team join event
                        radio.sendValue("join", playerIcon);
                        break;
                }
                break;
        }

        // show current animation
        gameFace();
    }
})

basic.showIcon(GameIcons.Pairing)
